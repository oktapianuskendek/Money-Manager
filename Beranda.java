
import java.awt.event.KeyEvent;
import java.sql.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.showMessageDialog;
import javax.swing.table.DefaultTableModel;
public class Beranda extends javax.swing.JFrame {
    /**
     * Creates new form Beranda
     */
    private String sql;
    public Beranda() {
        initComponents();
        loadHistoryPemasukan();
        loadHistoryPengeluaran();
        //JLabel lblNamaUser=new JLabel("Welcome, "+ModuleDB.nama);
        lblNamaUser.setText("Welcome, "+ModuleDB.nama);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        lblNamaUser = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtabPemasukan = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnEditPemasukan = new javax.swing.JButton();
        btnDeletePemasukan = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtabPengeluaran = new javax.swing.JTable();
        btnEditPengeluaran = new javax.swing.JButton();
        btnDeletePengeluaran = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        tfSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        menuBar1 = new javax.swing.JMenuBar();
        jMenuManajemen = new javax.swing.JMenu();
        menuItemTambahPemasukan = new javax.swing.JMenuItem();
        menuItemTambahPengeluaran = new javax.swing.JMenuItem();
        jMenuTampilkan = new javax.swing.JMenu();
        menuItemReport = new javax.swing.JMenuItem();
        jMenuUser = new javax.swing.JMenu();
        menuItemBuatUserBaru = new javax.swing.JMenuItem();
        menuItemGantiPassword = new javax.swing.JMenuItem();
        menuItemLogout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Student Money Manager - Beranda");
        setBackground(new java.awt.Color(20, 240, 240));
        setPreferredSize(new java.awt.Dimension(750, 718));
        setSize(new java.awt.Dimension(700, 700));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        jLabel1.setText("MONEY MANAGER");

        lblNamaUser.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblNamaUser.setText("Login sebagai:");

        jtabPemasukan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Jenis", "Tanggal", "Deskripsi", "Jumlah"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jtabPemasukan);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel3.setText("Pemasukan");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel4.setText("Pengeluaran");

        btnEditPemasukan.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnEditPemasukan.setText("Edit");
        btnEditPemasukan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditPemasukanActionPerformed(evt);
            }
        });

        btnDeletePemasukan.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnDeletePemasukan.setText("Delete");
        btnDeletePemasukan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletePemasukanActionPerformed(evt);
            }
        });

        jtabPengeluaran.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Jenis", "Tanggal", "Deskripsi", "Jumlah"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jtabPengeluaran);

        btnEditPengeluaran.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnEditPengeluaran.setText("Edit");
        btnEditPengeluaran.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditPengeluaranActionPerformed(evt);
            }
        });

        btnDeletePengeluaran.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnDeletePengeluaran.setText("Delete");
        btnDeletePengeluaran.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletePengeluaranActionPerformed(evt);
            }
        });

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        tfSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfSearchActionPerformed(evt);
            }
        });
        tfSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tfSearchKeyPressed(evt);
            }
        });

        btnSearch.setText("GO!");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Search:");

        jMenuManajemen.setText("Manajemen");

        menuItemTambahPemasukan.setText("Tambah Pemasukan");
        menuItemTambahPemasukan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemTambahPemasukanActionPerformed(evt);
            }
        });
        jMenuManajemen.add(menuItemTambahPemasukan);

        menuItemTambahPengeluaran.setText("Tambah Pengeluaran");
        menuItemTambahPengeluaran.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemTambahPengeluaranActionPerformed(evt);
            }
        });
        jMenuManajemen.add(menuItemTambahPengeluaran);

        menuBar1.add(jMenuManajemen);

        jMenuTampilkan.setText("Tampilkan");

        menuItemReport.setText("Report");
        menuItemReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemReportActionPerformed(evt);
            }
        });
        jMenuTampilkan.add(menuItemReport);

        menuBar1.add(jMenuTampilkan);

        jMenuUser.setText("User");

        menuItemBuatUserBaru.setText("Buat user baru");
        menuItemBuatUserBaru.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemBuatUserBaruActionPerformed(evt);
            }
        });
        jMenuUser.add(menuItemBuatUserBaru);

        menuItemGantiPassword.setText("Ganti password");
        menuItemGantiPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemGantiPasswordActionPerformed(evt);
            }
        });
        jMenuUser.add(menuItemGantiPassword);

        menuItemLogout.setText("Logout");
        menuItemLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemLogoutActionPerformed(evt);
            }
        });
        jMenuUser.add(menuItemLogout);

        menuBar1.add(jMenuUser);

        setJMenuBar(menuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnRefresh))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 751, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 751, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(664, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnEditPengeluaran)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnDeletePengeluaran))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnEditPemasukan)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnDeletePemasukan)))))
                .addContainerGap(15, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(244, 244, 244)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(147, 147, 147)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblNamaUser)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel5)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnSearch)))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(79, 79, 79)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRefresh)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditPemasukan)
                    .addComponent(btnDeletePemasukan))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDeletePengeluaran)
                    .addComponent(btnEditPengeluaran))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(54, 54, 54)
                    .addComponent(lblNamaUser)
                    .addGap(23, 23, 23)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5)
                        .addComponent(btnSearch))
                    .addContainerGap(583, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void loadKonfirmasiPenerimaanPemasukan(){
        DateFormat dateFormat=new SimpleDateFormat("dd");
        Calendar cal=Calendar.getInstance();
        int tglSkrg=Integer.parseInt(dateFormat.format(cal.getTime()));
        int idHariSkrg=cal.get(Calendar.DAY_OF_WEEK);
        if(idHariSkrg==1)
            idHariSkrg=7;
        else
            idHariSkrg-=1;
        sql="SELECT keterangan FROM reminder_pemasukan WHERE id_user="+ModuleDB.idUser+" AND enabled=1 AND (id_hari="+idHariSkrg+" OR tanggal="+tglSkrg+")";
        try{
            Connection con=ModuleDB.connectDB();
            Statement stmt=con.createStatement();
            ResultSet result=stmt.executeQuery(sql);
            while(result.next()){
                String question="Sesuai database reminder, anda memperoleh pemasukan '"+result.getString("keterangan")+"' pada hari ini. Tambahkan item pemasukan tersebut ke database?";
                int dialogResult=JOptionPane.showOptionDialog(null,question,"Notifikasi",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,null,null,null);
                if(dialogResult==JOptionPane.YES_OPTION){
                    TambahPemasukan formTambahPemasukan=new TambahPemasukan(result.getString("keterangan"));
                    formTambahPemasukan.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                    formTambahPemasukan.setVisible(true);
                }
            }
        }
        catch(SQLException e){
            showMessageDialog(null,e.getMessage());
        }
    }
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    private void menuItemBuatUserBaruActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemBuatUserBaruActionPerformed
        BuatUserBaru formBuatUserBaru=new BuatUserBaru();
        formBuatUserBaru.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        formBuatUserBaru.setVisible(true);
    }//GEN-LAST:event_menuItemBuatUserBaruActionPerformed

    private void menuItemTambahPemasukanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemTambahPemasukanActionPerformed
        TambahPemasukan formTambahPemasukan=new TambahPemasukan();
        formTambahPemasukan.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        formTambahPemasukan.setVisible(true);
    }//GEN-LAST:event_menuItemTambahPemasukanActionPerformed

    private void menuItemTambahPengeluaranActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemTambahPengeluaranActionPerformed
        TambahPengeluaran formTambahPengeluaran=new TambahPengeluaran();
        formTambahPengeluaran.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        formTambahPengeluaran.setVisible(true);
    }//GEN-LAST:event_menuItemTambahPengeluaranActionPerformed

    private void menuItemGantiPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemGantiPasswordActionPerformed
        GantiPassword formGantiPassword=new GantiPassword();
        formGantiPassword.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        formGantiPassword.setVisible(true);
    }//GEN-LAST:event_menuItemGantiPasswordActionPerformed

    private void menuItemReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemReportActionPerformed
        Report formReport=new Report();
        formReport.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        formReport.setVisible(true);
    }//GEN-LAST:event_menuItemReportActionPerformed

    private void menuItemLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemLogoutActionPerformed
        ModuleDB.idUser=0;
        ModuleDB.nama=null;
        ModuleDB.password=null;
        ModuleDB.username=null;
        new Login().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_menuItemLogoutActionPerformed

    private void btnEditPemasukanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditPemasukanActionPerformed
        int rowIdx=jtabPemasukan.getSelectedRow();
        int idPemasukan=Integer.parseInt(jtabPemasukan.getValueAt(rowIdx,0).toString());
        String jenisPemasukan=jtabPemasukan.getValueAt(rowIdx,1).toString();
        String tanggal=null;
        String bulan=null;
        String tahun=null;
        String keterangan=jtabPemasukan.getValueAt(rowIdx,3).toString();
        int jumlah=Integer.parseInt(jtabPemasukan.getValueAt(rowIdx,4).toString());
        try{
            sql="SELECT * FROM jenis";
            Connection con=ModuleDB.connectDB();
            Statement stmt=con.createStatement();
            ResultSet result=stmt.executeQuery(sql);
            Vector cbItems=new Vector();
            while(result.next()){
                cbItems.add(result.getString("jenis"));
            }
            con.close();
            tanggal=getTanggal(idPemasukan,1);
            bulan=getBulan(idPemasukan,1);
            tahun=getTahun(idPemasukan,1);
            DefaultComboBoxModel model=new DefaultComboBoxModel(cbItems);
            EditDataPemasukan formEditPemasukan=new EditDataPemasukan(this,model,idPemasukan,jenisPemasukan,tanggal,bulan,tahun,keterangan,jumlah);
            formEditPemasukan.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            formEditPemasukan.setVisible(true);
        }
        catch(SQLException e){
            showMessageDialog(null,e.getMessage());
        }
    }//GEN-LAST:event_btnEditPemasukanActionPerformed

    private void btnDeletePemasukanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletePemasukanActionPerformed
        int dialogResult=JOptionPane.showOptionDialog(null,"Apakah anda yakin menghapus item pemasukan ini?","Konfirmasi Hapus Item Pemasukan",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,null,null,null);
        if(dialogResult==JOptionPane.YES_OPTION){
            int rowIdx=jtabPemasukan.getSelectedRow();
            int idPemasukan=Integer.parseInt(jtabPemasukan.getValueAt(rowIdx,0).toString());
            sql="DELETE FROM pemasukan WHERE id_pemasukan="+idPemasukan;
            try{
                Connection con=ModuleDB.connectDB();
                Statement stmt=con.createStatement();
                stmt.executeUpdate(sql);
                showMessageDialog(null,"Item pemasukan berhasil dihapus!");
                loadHistoryPemasukan();
            }
            catch(SQLException e){
                showMessageDialog(null,e.getMessage());
            }
        }
    }//GEN-LAST:event_btnDeletePemasukanActionPerformed

    private void btnEditPengeluaranActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditPengeluaranActionPerformed
        int rowIdx=jtabPengeluaran.getSelectedRow();
        int idPengeluaran=Integer.parseInt(jtabPengeluaran.getValueAt(rowIdx,0).toString());
        String jenisPengeluaran=jtabPengeluaran.getValueAt(rowIdx,1).toString();
        String tanggal=null;
        String bulan=null;
        String tahun=null;
        String keterangan=jtabPengeluaran.getValueAt(rowIdx,3).toString();
        int jumlah=Integer.parseInt(jtabPengeluaran.getValueAt(rowIdx,4).toString());
        try{
            sql="SELECT * FROM jenis";
            Connection con=ModuleDB.connectDB();
            Statement stmt=con.createStatement();
            ResultSet result=stmt.executeQuery(sql);
            Vector cbItems=new Vector();
            while(result.next()){
                cbItems.add(result.getString("jenis"));
            }
            con.close();
            tanggal=getTanggal(idPengeluaran,2);
            bulan=getBulan(idPengeluaran,2);
            tahun=getTahun(idPengeluaran,2);
            DefaultComboBoxModel model=new DefaultComboBoxModel(cbItems);
            EditDataPengeluaran formEditPengeluaran=new EditDataPengeluaran(this,model,idPengeluaran,jenisPengeluaran,tanggal,bulan,tahun,keterangan,jumlah);
            formEditPengeluaran.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            formEditPengeluaran.setVisible(true);
        }
        catch(SQLException e){
            showMessageDialog(null,e.getMessage());
        }
    }//GEN-LAST:event_btnEditPengeluaranActionPerformed

    private void btnDeletePengeluaranActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletePengeluaranActionPerformed
        int dialogResult=JOptionPane.showOptionDialog(null,"Apakah anda yakin menghapus item pengeluaran ini?","Konfirmasi Hapus Item Pengeluaran",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,null,null,null);
        if(dialogResult==JOptionPane.YES_OPTION){
            int rowIdx=jtabPengeluaran.getSelectedRow();
            int idPengeluaran=Integer.parseInt(jtabPengeluaran.getValueAt(rowIdx,0).toString());
            sql="DELETE FROM pengeluaran WHERE id_pengeluaran="+idPengeluaran;
            try{
                Connection con=ModuleDB.connectDB();
                Statement stmt=con.createStatement();
                stmt.executeUpdate(sql);
                showMessageDialog(null,"Item pengeluaran berhasil dihapus!");
                loadHistoryPengeluaran();
            }
            catch(SQLException e){
                showMessageDialog(null,e.getMessage());
            }
        }
    }//GEN-LAST:event_btnDeletePengeluaranActionPerformed

    public String getTanggal(int idItem,int option){
        if(option==1)
            sql="SELECT strftime('%d',tanggal) AS 'tanggal' FROM pemasukan WHERE id_pemasukan="+idItem;
        else if(option==2)
            sql="SELECT strftime('%d',tanggal) AS 'tanggal' FROM pengeluaran WHERE id_pengeluaran="+idItem;
        String tanggal=null;
        try{
            Connection con=ModuleDB.connectDB();
            Statement stmt=con.createStatement();
            ResultSet result=stmt.executeQuery(sql);
            result.next();
            tanggal=result.getString("tanggal");
            con.close();
        }
        catch(SQLException e){
            showMessageDialog(null,e.getMessage());
        }
        return tanggal;
    }
    
    public String getBulan(int idItem,int option){
        if(option==1)
            sql="SELECT strftime('%m',tanggal) AS 'bulan' FROM pemasukan WHERE id_pemasukan="+idItem;
        else if(option==2)
            sql="SELECT strftime('%m',tanggal) AS 'bulan' FROM pengeluaran WHERE id_pengeluaran="+idItem;
        String bulan=null;
        try{
            Connection con=ModuleDB.connectDB();
            Statement stmt=con.createStatement();
            ResultSet result=stmt.executeQuery(sql);
            result.next();
            bulan=result.getString("bulan");
            con.close();
        }
        catch(SQLException e){
            showMessageDialog(null,e.getMessage());
        }
        return bulan;
    }
    
    public String getTahun(int idItem,int option){
        if(option==1)
            sql="SELECT strftime('%Y',tanggal) AS 'tahun' FROM pemasukan WHERE id_pemasukan="+idItem;
        else if(option==2)
            sql="SELECT strftime('%Y',tanggal) AS 'tahun' FROM pengeluaran WHERE id_pengeluaran="+idItem;
        String tahun=null;
        try{
            Connection con=ModuleDB.connectDB();
            Statement stmt=con.createStatement();
            ResultSet result=stmt.executeQuery(sql);
            result.next();
            tahun=result.getString("tahun");
            con.close();
        }
        catch(SQLException e){
            showMessageDialog(null,e.getMessage());
        }
        return tahun;
    }
    
    public void loadHistoryPemasukan(){
        try{
            sql="SELECT p.id_pemasukan,j.jenis,strftime('%d',p.tanggal) AS 'tgl',strftime('%m',p.tanggal) AS 'bln',strftime('%Y',p.tanggal) AS 'thn',p.keterangan,p.jumlah FROM jenis j,pemasukan p WHERE p.id_jenis=j.id_jenis AND id_user="+ModuleDB.idUser+" ORDER BY p.tanggal;";
            Connection con=ModuleDB.connectDB();
            Statement stmt=con.createStatement();
            ResultSet result=stmt.executeQuery(sql);
            DefaultTableModel model=(DefaultTableModel)jtabPemasukan.getModel();
            model.setRowCount(0);
            while(result.next()){
                String tgl=result.getString("tgl");
                String bln=result.getString("bln");
                String thn=result.getString("thn");
                String tanggalPemasukanLengkap=tgl+"-"+bln+"-"+thn;
                Vector row=new Vector();
                row.add(result.getString("id_pemasukan"));
                row.add(result.getString("jenis"));
                row.add(tanggalPemasukanLengkap);
                row.add(result.getString("keterangan"));
                row.add(result.getInt("jumlah"));
                model.addRow(row);
            }
            con.close();
            jtabPemasukan.setModel(model);
        }
        catch(SQLException e){
            showMessageDialog(null,e.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public void loadHistoryPengeluaran(){
        try{
            sql="SELECT p.id_pengeluaran,j.jenis,strftime('%d',p.tanggal) AS 'tgl',strftime('%m',p.tanggal) AS 'bln',strftime('%Y',p.tanggal) AS 'thn',p.keterangan,p.jumlah FROM jenis j,pengeluaran p WHERE p.id_jenis=j.id_jenis AND id_user="+ModuleDB.idUser+" ORDER BY p.tanggal;";
            Connection con=ModuleDB.connectDB();
            Statement stmt=con.createStatement();
            ResultSet result=stmt.executeQuery(sql);
            DefaultTableModel model=(DefaultTableModel)jtabPengeluaran.getModel();
            model.setRowCount(0);
            while(result.next()){
                String tgl=result.getString("tgl");
                String bln=result.getString("bln");
                String thn=result.getString("thn");
                String tanggalPengeluaranLengkap=tgl+"-"+bln+"-"+thn;
                Vector row=new Vector();
                row.add(result.getInt("id_pengeluaran"));
                row.add(result.getString("jenis"));
                row.add(tanggalPengeluaranLengkap);
                row.add(result.getString("keterangan"));
                row.add(result.getInt("jumlah"));
                model.addRow(row);
            }
            con.close();
            jtabPengeluaran.setModel(model);
        }
        catch(SQLException e){
            showMessageDialog(null,e.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void searchPemasukan(String keyword){
        try{
            sql="SELECT p.id_pemasukan,j.jenis,strftime('%d',p.tanggal) AS 'tgl',strftime('%m',p.tanggal) AS 'bln',strftime('%Y',p.tanggal) AS 'thn',p.keterangan,p.jumlah FROM jenis j,pemasukan p WHERE p.id_jenis=j.id_jenis AND id_user="+ModuleDB.idUser+" AND p.keterangan LIKE '%"+keyword+"%'ORDER BY p.tanggal;";
            Connection con=ModuleDB.connectDB();
            Statement stmt=con.createStatement();
            ResultSet result=stmt.executeQuery(sql);
            DefaultTableModel model=(DefaultTableModel)jtabPemasukan.getModel();
            model.setRowCount(0);
            while(result.next()){
                String tgl=result.getString("tgl");
                String bln=result.getString("bln");
                String thn=result.getString("thn");
                String tanggalPemasukanLengkap=tgl+"-"+bln+"-"+thn;
                Vector row=new Vector();
                row.add(result.getString("id_pemasukan"));
                row.add(result.getString("jenis"));
                row.add(tanggalPemasukanLengkap);
                row.add(result.getString("keterangan"));
                row.add(result.getInt("jumlah"));
                model.addRow(row);
            }
            con.close();
            jtabPemasukan.setModel(model);
        }
        catch(SQLException e){
            showMessageDialog(null,e.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void searchPengeluaran(String keyword){
        try{
            sql="SELECT p.id_pengeluaran,j.jenis,strftime('%d',p.tanggal) AS 'tgl',strftime('%m',p.tanggal) AS 'bln',strftime('%Y',p.tanggal) AS 'thn',p.keterangan,p.jumlah FROM jenis j,pengeluaran p WHERE p.id_jenis=j.id_jenis AND id_user="+ModuleDB.idUser+" AND p.keterangan LIKE '%"+keyword+"%' ORDER BY p.tanggal;";
            Connection con=ModuleDB.connectDB();
            Statement stmt=con.createStatement();
            ResultSet result=stmt.executeQuery(sql);
            DefaultTableModel model=(DefaultTableModel)jtabPengeluaran.getModel();
            model.setRowCount(0);
            while(result.next()){
                String tgl=result.getString("tgl");
                String bln=result.getString("bln");
                String thn=result.getString("thn");
                String tanggalPengeluaranLengkap=tgl+"-"+bln+"-"+thn;
                Vector row=new Vector();
                row.add(result.getInt("id_pengeluaran"));
                row.add(result.getString("jenis"));
                row.add(tanggalPengeluaranLengkap);
                row.add(result.getString("keterangan"));
                row.add(result.getInt("jumlah"));
                model.addRow(row);
            }
            con.close();
            jtabPengeluaran.setModel(model);
        }
        catch(SQLException e){
            showMessageDialog(null,e.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    
    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        loadHistoryPemasukan();
        loadHistoryPengeluaran();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void tfSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfSearchActionPerformed

    private void tfSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfSearchKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            String keyword=tfSearch.getText();
            searchPemasukan(keyword);
            searchPengeluaran(keyword);
        }
    }//GEN-LAST:event_tfSearchKeyPressed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        String keyword=tfSearch.getText();
        searchPemasukan(keyword);
        searchPengeluaran(keyword);
    }//GEN-LAST:event_btnSearchActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Beranda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Beranda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Beranda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Beranda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Beranda().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeletePemasukan;
    private javax.swing.JButton btnDeletePengeluaran;
    private javax.swing.JButton btnEditPemasukan;
    private javax.swing.JButton btnEditPengeluaran;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenuManajemen;
    private javax.swing.JMenu jMenuTampilkan;
    private javax.swing.JMenu jMenuUser;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jtabPemasukan;
    private javax.swing.JTable jtabPengeluaran;
    private javax.swing.JLabel lblNamaUser;
    private javax.swing.JMenuBar menuBar1;
    private javax.swing.JMenuItem menuItemBuatUserBaru;
    private javax.swing.JMenuItem menuItemGantiPassword;
    private javax.swing.JMenuItem menuItemLogout;
    private javax.swing.JMenuItem menuItemReport;
    private javax.swing.JMenuItem menuItemTambahPemasukan;
    private javax.swing.JMenuItem menuItemTambahPengeluaran;
    private javax.swing.JTextField tfSearch;
    // End of variables declaration//GEN-END:variables
}
